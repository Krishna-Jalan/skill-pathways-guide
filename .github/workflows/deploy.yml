name: 🚀 Deploy to AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  # Job 0: Preflight - Check secrets
  preflight:
    name: 🔍 Preflight Check
    runs-on: ubuntu-latest
    
    steps:
      - name: ✅ Verify AWS secrets are configured
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ ERROR: AWS_ACCESS_KEY_ID secret is not set"
            echo "Please add it in: Settings → Secrets and variables → Actions → New repository secret"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ ERROR: AWS_SECRET_ACCESS_KEY secret is not set"
            echo "Please add it in: Settings → Secrets and variables → Actions → New repository secret"
            exit 1
          fi
          echo "✅ All required secrets are configured"

  # Job 1: Build and Test
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: preflight
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          CI: false

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 1

  # Job 2: Docker Build and Test
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: skill-pathways:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker container
        run: |
          docker run -d -p 3000:80 --name test-container skill-pathways:${{ github.sha }}
          sleep 5
          curl -f http://localhost:3000/health || exit 1
          docker stop test-container

  # Job 3: Terraform Plan
  terraform-plan:
    name: 📋 Terraform Plan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Terraform Init
        working-directory: terraform
        run: terraform init

      - name: ✅ Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: 📋 Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: 📤 Upload Terraform plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan
          retention-days: 1

  # Job 4: Deploy to AWS
  deploy:
    name: 🚀 Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, terraform-plan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: 📥 Download Terraform plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform/

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Terraform Init
        working-directory: terraform
        run: terraform init

      - name: ✅ Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: 📊 Get Terraform Outputs
        id: tf-outputs
        working-directory: terraform
        run: |
          echo "bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "distribution=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "url=$(terraform output -raw website_url)" >> $GITHUB_OUTPUT

      - name: 📤 Sync to S3
        run: |
          aws s3 sync dist/ s3://${{ steps.tf-outputs.outputs.bucket }} \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "index.html" \
            --exclude "*.html"
          
          aws s3 sync dist/ s3://${{ steps.tf-outputs.outputs.bucket }} \
            --cache-control "public,max-age=0,must-revalidate" \
            --exclude "*" \
            --include "index.html" \
            --include "*.html"

      - name: 🔄 Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.tf-outputs.outputs.distribution }} \
            --paths "/*"

      - name: ✅ Deployment Summary
        run: |
          echo "🎉 Deployment Successful!"
          echo "🌐 Website URL: ${{ steps.tf-outputs.outputs.url }}"
          echo "📦 S3 Bucket: ${{ steps.tf-outputs.outputs.bucket }}"
          echo "🚀 CloudFront: ${{ steps.tf-outputs.outputs.distribution }}"
